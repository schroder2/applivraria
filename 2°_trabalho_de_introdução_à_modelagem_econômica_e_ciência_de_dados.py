# -*- coding: utf-8 -*-
"""2Â° Trabalho de IntroduÃ§Ã£o Ã  Modelagem EconÃ´mica e CiÃªncia de Dados.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J-JyEC5IZguviauemvXTbMExL9emngMG

#2Â° Trabalho de IntroduÃ§Ã£o Ã  Modelagem EconÃ´mica e CiÃªncia de Dados

  VocÃª foi contratado para desenvolver um sistema de gerenciamento de estoque, clientes e vendas para uma livraria. O sistema deve permitir visualizar e filtrar informaÃ§Ãµes sobre livros, clientes e vendas de forma dinÃ¢mica, alÃ©m de fornecer insights sobre as aquisiÃ§Ãµes, gastos dos clientes e quantidades de livros vendidos.

####Tarefas:

1. CriaÃ§Ã£o de Bancos de Dados SQLite:
  i. Crie trÃªs bancos de dados SQLite: `livros.db`, `clientes.db` e `vendas.db`.
  ii. No banco de dados `livros.db`, crie uma tabela chamada `livros` com as seguintes colunas:
       -  `id_livro`: inteiro, chave primÃ¡ria
       -  `titulo`: texto
       -  `autor`: texto
       -  `genero`: texto
       -  `preco`: real
  iii. No banco de dados `clientes.db`, crie uma tabela chamada `clientes` com as seguintes colunas:
       -  `id_cliente`: inteiro, chave primÃ¡ria
       -  `nome`: texto
       -  `email`: texto
       - `telefone`: texto
  iv. No banco de dados `vendas.db`, crie uma tabela chamada `vendas` com as seguintes colunas:
       -  `id_venda`: inteiro, chave primÃ¡ria
       -  `id_cliente`: inteiro, chave estrangeira referenciando `clientes(id_cliente)`
       -  `id_livro`: inteiro, chave estrangeira referenciando `livros(id_livro)`
       -  `quantidade`: inteiro, indicando a quantidade de livros adquirida pelo cliente
  v. Insira alguns dados de exemplo em todas as tabelas.

2. Leitura e IntegraÃ§Ã£o de Dados com Pandas:
  i. Utilize a biblioteca `pandas` para ler os dados das tabelas `livros`, `clientes` e `vendas` dos respectivos bancos de dados.
  ii. Crie trÃªs DataFrames: `df_livros`, `df_clientes` e `df_vendas`.
  iii. Integre os trÃªs DataFrames em um Ãºnico DataFrame chamado `df_completo` utilizando as colunas `id_cliente` e `id_livro` como chaves de junÃ§Ã£o.

3. CriaÃ§Ã£o de um Aplicativo Streamlit:
  i. Utilize a biblioteca `streamlit` para criar um aplicativo web interativo.
  ii. Exiba o DataFrame `df_completo` no aplicativo.
  iii. Implemente filtros dinÃ¢micos para as colunas do DataFrame, permitindo ao usuÃ¡rio filtrar os dados por:
      -  Livros: tÃ­tulo, autor, gÃªnero e faixa de preÃ§o.
      -  Clientes: nome, email e telefone.
      -  Vendas: quantidade de livros adquirida, data da venda (se aplicÃ¡vel).
  iv. Crie visualizaÃ§Ãµes e dashboards que permitam analisar:
      -  Aquisicoes e Gastos dos Clientes: total gasto por cliente, livros mais comprados por cliente, etc.
      -  Quantidades de Livros Vendidos: total de vendas por livro, livros mais vendidos, etc.
      - Exiba os dados filtrados e as visualizaÃ§Ãµes no aplicativo.

Requisitos Adicionais:

  i.  Utilize ao menos as bibliotecas `sqlite3`, `pandas` e `streamlit`.
  ii.  O cÃ³digo deve ser bem documentado e organizado.
  iii.  O aplicativo Streamlit deve ter uma interface intuitiva e fÃ¡cil de usar.
  iv.  As visualizaÃ§Ãµes e dashboards devem ser informativos e apresentar os dados de forma clara.

Objetivo:

Desenvolver um sistema funcional que permita a gestÃ£o completa da livraria, incluindo visualizaÃ§Ã£o e filtragem de informaÃ§Ãµes sobre livros, clientes e vendas, alÃ©m de fornecer insights relevantes para a tomada de decisÃµes.

ObservaÃ§Ãµes:

  i. Este enunciado pode ser adaptado para incluir funcionalidades adicionais, como cadastro de novos livros e clientes, ediÃ§Ã£o de informaÃ§Ãµes existentes e geraÃ§Ã£o de relatÃ³rios mais complexos.
  ii. A criatividade na implementaÃ§Ã£o da interface do aplicativo Streamlit e na criaÃ§Ã£o das visualizaÃ§Ãµes Ã© encorajada e valorizarÃ¡ a avaliaÃ§Ã£o.

##InstalaÃ§Ã£o dos programas necessÃ¡rios
"""

!pip install --upgrade streamlit
!pip install streamlit pandas -g
!npm install localtunnel

"""##Codigo do site da livraria

"""

import streamlit as st
import pandas as pd
import sqlite3
from datetime import datetime

# 1. ConfiguraÃ§Ã£o dos Bancos de Dados ==========================================
def criar_bancos():
    # Criar e popular tabelas
    for db, schema in [('livros.db', '''
                        CREATE TABLE IF NOT EXISTS livros (
                            id_livro INTEGER PRIMARY KEY,
                            titulo TEXT,
                            autor TEXT,
                            genero TEXT,
                            preco REAL)'''),
                       ('clientes.db', '''
                        CREATE TABLE IF NOT EXISTS clientes (
                            id_cliente INTEGER PRIMARY KEY,
                            nome TEXT,
                            email TEXT,
                            telefone TEXT)'''),
                       ('vendas.db', '''
                        CREATE TABLE IF NOT EXISTS vendas (
                            id_venda INTEGER PRIMARY KEY,
                            id_cliente INTEGER,
                            id_livro INTEGER,
                            quantidade INTEGER,
                            data_venda DATE)''')]:
        conn = sqlite3.connect(db)
        conn.execute(schema)
        conn.commit()
        conn.close()

    # Inserir dados de exemplo
    exemplos = {
        'livros.db': [
            (1, 'Dom Casmurro', 'Machado de Assis', 'ClÃ¡ssico', 45.90),
            (2, '1984', 'George Orwell', 'FicÃ§Ã£o DistÃ³pica', 37.50),
            (3, 'Clean Code', 'Robert C. Martin', 'Tecnologia', 89.90)
        ],
        'clientes.db': [
            (1, 'JoÃ£o Silva', 'joao@email.com', '(11) 9999-8888'),
            (2, 'Maria Souza', 'maria@email.com', '(21) 7777-6666')
        ],
       'vendas.db': [
        (1, 1, 1, 2, datetime.strptime('2024-01-15', '%Y-%m-%d').strftime('%Y-%m-%d')),
        (2, 2, 2, 1, datetime.strptime('2024-02-01', '%Y-%m-%d').strftime('%Y-%m-%d')),
        (3, 1, 3, 1, datetime.strptime('2024-02-10', '%Y-%m-%d').strftime('%Y-%m-%d'))
        ],
    }

    for db, dados in exemplos.items():
        conn = sqlite3.connect(db)
        cursor = conn.cursor()
        tabela = db.split('.')[0]
        cursor.executemany(f'INSERT OR IGNORE INTO {tabela} VALUES ({",".join(["?"]*len(dados[0]))})', dados)
        conn.commit()
        conn.close()

# 2. IntegraÃ§Ã£o de Dados ======================================================
@st.cache_data
def carregar_dados():
    dfs = {}
    for db in ['livros.db', 'clientes.db', 'vendas.db']:
        conn = sqlite3.connect(db)
        tabela = db.split('.')[0]
        dfs[tabela] = pd.read_sql_query(f"SELECT * FROM {tabela}", conn)
        conn.close()

    df_completo = dfs['vendas'].merge(dfs['clientes'], on='id_cliente')\
                               .merge(dfs['livros'], on='id_livro')
    df_completo['total_venda'] = df_completo['preco'] * df_completo['quantidade']
    return df_completo

# 3. Interface Streamlit ======================================================
def main():
    st.set_page_config(page_title="GestÃ£o de Livraria", layout="wide")
    criar_bancos()
    df = carregar_dados()

    # Sidebar - Filtros
    st.sidebar.header("Filtros AvanÃ§ados")

    # Filtros de Livros
    generos = ['Todos'] + df['genero'].unique().tolist()
    genero_selecionado = st.sidebar.selectbox('GÃªnero LiterÃ¡rio', generos)

    faixa_preco = st.sidebar.slider('Faixa de PreÃ§o (R$)',
                                  float(df['preco'].min()),
                                  float(df['preco'].max()),
                                  (0.0, 100.0))

    # Filtros de Clientes
    cliente_selecionado = st.sidebar.multiselect('Clientes',
                                                df['nome'].unique())

    # Filtros de Vendas
    data_min = pd.to_datetime(df['data_venda']).min().date()
    data_max = pd.to_datetime(df['data_venda']).max().date()
    datas_selecionadas = st.sidebar.date_input('PerÃ­odo das Vendas',
                                             [data_min, data_max])

    # Aplicar Filtros
    df_filtrado = df.copy()
    if genero_selecionado != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['genero'] == genero_selecionado]

    df_filtrado = df_filtrado[(df_filtrado['preco'] >= faixa_preco[0]) &
                            (df_filtrado['preco'] <= faixa_preco[1])]

    if cliente_selecionado:
        df_filtrado = df_filtrado[df_filtrado['nome'].isin(cliente_selecionado)]

    df_filtrado = df_filtrado[(df_filtrado['data_venda'] >= str(datas_selecionadas[0])) &
                            (df_filtrado['data_venda'] <= str(datas_selecionadas[1]))]

    # VisualizaÃ§Ã£o Principal
    st.title("ðŸ“Š Dashboard de GestÃ£o de Livraria")

    # MÃ©tricas Principais
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total de Vendas", f"R$ {df_filtrado['total_venda'].sum():.2f}")
    with col2:
        st.metric("Livros Vendidos", df_filtrado['quantidade'].sum())
    with col3:
        st.metric("Clientes Ãšnicos", df_filtrado['id_cliente'].nunique())

    # VisualizaÃ§Ãµes GrÃ¡ficas
    tab1, tab2, tab3 = st.tabs(["AnÃ¡lise de Vendas", "Desempenho de Livros", "Comportamento do Cliente"])

    with tab1:
        st.subheader("Vendas por PerÃ­odo")
        vendas_por_data = df_filtrado.groupby('data_venda')['total_venda'].sum()
        st.line_chart(vendas_por_data)

    with tab2:
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("Top 5 Livros Mais Vendidos")
            top_livros = df_filtrado.groupby('titulo')['quantidade'].sum().nlargest(5)
            st.bar_chart(top_livros)

        with col2:
            st.subheader("DistribuiÃ§Ã£o por GÃªnero")
            generos = df_filtrado.groupby('genero')['quantidade'].sum()
            fig = generos.plot.pie(autopct='%1.1f%%', ylabel='').figure
            st.pyplot(fig)

    with tab3:
        st.subheader("Gasto Total por Cliente")
        gasto_cliente = df_filtrado.groupby('nome')['total_venda'].sum().sort_values(ascending=False)
        st.bar_chart(gasto_cliente)

    # Tabela de Dados
    st.subheader("Detalhes das Vendas")
    st.dataframe(df_filtrado.style.format({'preco': 'R$ {:.2f}', 'total_venda': 'R$ {:.2f}'}),
                height=400,
                use_container_width=True)

if __name__ == "__main__":
    main()

"""##ExecuÃ§Ã£o do app no Streamlit

"""

!streamlit run app_livraria.py & npx localtunnel --port 8501